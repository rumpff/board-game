<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Init Variables
Player1Sprite = noone;
Player2Sprite = noone;

angleSin = 0;
scaleSin = 0;
textScale = 1;
textAngle = 0;
SiNumber3 = 0;

exitTimer = 0;

pitch = 1;
holdTimer = 0.5

// Define player characters
switch (global.Player1Profile) // Player 1
 {
     case 1:
     Player1Sprite = spr_monopoly_idle;
     break;
     case 2:
     Player1Sprite = spr_mens_idle;
     break;
     case 3:
     Player1Sprite = spr_love_idle;
     break;
     case 4:
     Player1Sprite = spr_veridian_idle;
     break;
     case violet:
     Player1Sprite = spr_violet_idle;
     break;
     case 5:
     Player1Sprite = spr_surf_idle;
     break;
     case 6:
     Player1Sprite = spr_skate_idle;
     break;
     
     default: 
     Player1Sprite = spr_player_idle;
 }
switch (global.Player2Profile) // Player 1
 {
     case 1:
     Player2Sprite = spr_monopoly_idle;
     break;
     case 2:
     Player2Sprite = spr_mens_idle;
     break;
     case 3:
     Player2Sprite = spr_love_idle;
     break;
     case 4:
     Player2Sprite = spr_veridian_idle;
     break;
     case violet:
     Player2Sprite = spr_violet_idle;
     break;
     case 5:
     Player2Sprite = spr_surf_idle;
     break;
     case 6:
     Player2Sprite = spr_skate_idle;
     break;
     
     default: 
     Player2Sprite = spr_player_idle;
 }
 
audio_pause_sound(snd_wind);
audio_pause_sound(snd_wind2);
audio_pause_sound(snd_countdown);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gamepad_button_check_pressed(global.CurrentHost, gp_start))
{
    audio_resume_sound(snd_wind);
    audio_resume_sound(snd_wind2);
    audio_resume_sound(snd_countdown);    

    room_goto(global.ActiveArena);
}

angleSin += (0.15 / 2);
scaleSin += (0.25 / 2);
SiNumber3 += 0.05;

textAngle = sin (angleSin) * 4;
textScale = sin (scaleSin) / 5 + 1;
cPosY = sin (SiNumber3) * 20;

audio_sound_pitch(global.BGMIndex ,pitch);

if (exitTimer &lt; 0)
{
    exitTimer = 0;
}

if (gamepad_button_check(global.CurrentHost, gp_face2))
{
    exitTimer += 2;
}
else if (exitTimer &gt; 0)
{
    exitTimer -= 6;
}

if (exitTimer == 100)
{
    // exit game
    global.AbortGame = true;
    room_goto(global.ActiveArena);
}


if pitch &gt; 0.5
{
    pitch -= 0.005;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (file_exists("pauseGame.png"))
{
    scr_bck = background_add("pauseGame.png", false, true);
    background_visible[0] = true;
    background_index[0] = scr_bck;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the black background
draw_set_color(c_black);
draw_set_alpha(0.7);
draw_rectangle(0, 0, room_width, room_height, false);
draw_set_alpha(1);

// Draw the player characters
draw_sprite_ext(Player1Sprite, 0, (room_width / 3 + room_width / 2), (room_height / 2) - (128 / 2) - 15, -1, 1, 0, image_blend, image_alpha);
draw_sprite(Player2Sprite, 0, (room_width / 6), (room_height / 2) - (128 / 2) - 15);

// Draw Score
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_font(fnt_main);

// Drop Shadow
draw_set_color(c_black)
draw_text((room_width / 3) + (room_width / 2) + 15, (room_height / 2) + 15 + 5, global.Player1Score)
draw_text((room_width / 6), (room_height / 2) + 15 + 5, global.Player2Score)

// Actual text
draw_set_color(c_white)
draw_text((room_width / 3) + (room_width / 2) + 15, (room_height / 2) + 15, global.Player1Score)
draw_text((room_width / 6), (room_height / 2) + 15, global.Player2Score)

// Draw "paused"
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_large);

// Drop Shadow
draw_set_color(c_black)
draw_text_transformed(room_width / 2, room_height / 2 + 5, "paused", textScale, textScale, textAngle)

// Actual text
draw_set_color(c_white)
draw_text_transformed(room_width / 2, room_height / 2, "paused", textScale, textScale, textAngle)

// Draw controlls
draw_sprite(spr_miniControllerHelp, 0, room_width / 2, room_height * 0.75 + cPosY);

// Draw overlay when exiting
draw_set_color(c_black)
draw_set_alpha(exitTimer * 0.01)
draw_rectangle(0, 0, room_width, room_height, false)
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
