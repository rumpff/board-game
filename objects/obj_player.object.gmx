<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DashGround = 0
view_yview -= 5
sprite_index = sprite_idle;
DrawTrail = false;
image_speed = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DashGround = 1;
alarm[1] = 15;
sprite_index = sprite_dash;
audio_stop_sound(snd_wind);
audio_play_sound(snd_inpact,1,0);
view_yview += 5;
image_speed = 0;

var rumb = instance_create(x,y,obj_RumbleShort);
with(rumb) gpID = 1;
with(rumb) amount = 0.6;

with(obj_screenshake) yY += 50;

        
spriteScaleX = 1.8;
spriteScaleY = 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Input

key_right = (keyboard_check(vk_right) || gamepad_axis_value(1,gp_axislh) &gt; 0) || (gamepad_button_check(m_PlayerId, gp_padr));
key_left = -(keyboard_check(vk_left) || gamepad_axis_value(1,gp_axislh) &lt; 0 || (gamepad_button_check(m_PlayerId, gp_padl)));
key_jump = (keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(m_PlayerId, gp_face1));
key_jump_held = (keyboard_check(vk_space) || gamepad_button_check(m_PlayerId, gp_face1));
key_down = (keyboard_check(vk_down) || gamepad_button_check(m_PlayerId, gp_face3) || gamepad_button_check(m_PlayerId, gp_face2));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>DashGround</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move horizontal
move = key_left + key_right;
hsp = move * movespeed;
if  (dash == 0)
{
    if (vsp &lt; 30) vsp += grav;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump control

if (place_meeting(x,y+1,obj_wall))
{
    jumps = jumpsmax;
}
else
{
    if (jumps == jumpsmax) jumps -=1;
}

if (key_jump) &amp;&amp; (jumps &gt; 0) &amp;&amp; (!key_down)
{
    if (jumps == 2)
    {
        audio_play_sound(sound_jump1,1,0);
        
        spriteScaleX = 0.75;
        spriteScaleY = 1.25;
    }
    if (jumps == 1)
    {
        instance_create(obj_player.x+0,obj_player.y+32,obj_doubleJumpFX)
        audio_play_sound(sound_jump2,1,0)
    }
    jumps -= 1;
    vsp = -jumpspeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dash control

if (vsp &lt; 0) &amp;&amp; (!key_jump_held) vsp = max(vsp,-jumpspeed/2)

if (key_down)
{
    if !audio_is_playing(snd_wind)
    {
        audio_play_sound(snd_wind,1,0);
    }
    vsp = VDashSpeed
    dash = 1;
    jumps = 0;
    DrawTrail = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finalize Horizontal move
hsp_final = hsp + hsp_carry;
hsp_carry = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision

//Horizontal Collision
if (place_meeting(x+hsp_final,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp_final),y,obj_wall))
    {
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}
x += hsp_final;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))

{
    
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
        if (dash = 1)
        {
            alarm[0] = 1
        }
    }
    audio_stop_sound(snd_wind);
    vsp = 0;
    dash = 0;
}
y += vsp;

// other player collision vertical
if (place_meeting(x,y+vsp,obj_player))
{
    if vsp &gt; 0
    if (dash == 1)
    {
        KillPlayer(abs(1 - m_PlayerId))
    }
}
// Collison with kill plain
if (place_meeting(x, y, obj_killPlain))
{
    scr_player2dedKP();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animate
if (move!=0) image_xscale = move;
if (place_meeting(x,y+1,obj_wall))
{
    if (move!=0) 
    {
        sprite_index = sprite_run; 
        image_speed = imageSpeed;
    }
    else if (sprite_index != sprite_dash) sprite_index = sprite_idle; image_speed = imageSpeed / 2;
    angle = 0;
}
else
{
    if (vsp &lt; 0) sprite_index = sprite_jump; else if (dash = 1) sprite_index = sprite_dash; else sprite_index = sprite_fall;
    
    var angleDest = 30;
    if(jumps == 0) angleDest += 20;
     
    angle = lerp(angle, -move * angleDest, 0.2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Footstep sounds
if (sprite_index = sprite_run)
{
    ii = floor(image_index);
    if (ii != iiPrev)
    {
        if (ii == stepFrame1)
        {
            audio_play_sound(snd_footstep1, 1, 0);
        }
        else if (ii == stepFrame2)
        {
            audio_play_sound(snd_footstep2, 1, 0);
        }
    }
    iiPrev = ii;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play wind sound
if (vsp == VDashSpeed)
{
    if !audio_is_playing(snd_wind)
    {
    audio_play_sound(snd_wind,1,0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Squish
spriteScaleX = lerp(spriteScaleX, 1, 0.3);
spriteScaleY = lerp(spriteScaleY, 1, 0.3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>After init</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

/* Init Variables 
 * m_PlayerId
*/

grav = 0.8;
hsp = 0;
hsp_carry = 0;
vsp = 0;
movespeed = 16;
jumps = 1;
angle = 0;

jumpsmax = 2;

jumpspeed_normal = 18;
jumpspeed_powerup = 10;

jumpspeed = jumpspeed_normal

dash = 0;
VDashSpeed = 75;
DashGround = 0;

DrawTrail = false;

ii = 0; // the floor of the current image number
iiPrev = -1;

x = obj_player1Spawn.x;
y = obj_player1Spawn.y;

key_down = 0;


vsp = -jumpspeed;


spriteScaleX = 1;
spriteScaleY = 1;

instance_create(x,y,obj_shockwave);

gamepad_set_axis_deadzone(0,0.3);

global.ShockDeath = 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Assign sprites
// choosing the character
// if the player choose: Monopoly
if (global.Player1Profile = monopoly)
{
    sprite_idle =   spr_monopoly_idle;
    sprite_run =    spr_monopoly_run;
    sprite_jump =   spr_monopoly_jump;
    sprite_fall =   spr_monopoly_fall;
    sprite_dash =   spr_monopoly_dash;
    
    sound_jump1 = snd_jump1;
    sound_jump2 = snd_jump2;
    
    imageSpeed = 1;
    
    stepFrame1 = 0;
    stepFrame2 = 8;
}
// if the player choose: Mens Erger Je Niet
else if (global.Player1Profile = mens)
{
    sprite_idle =   spr_mens_idle;
    sprite_run =    spr_mens_run;
    sprite_jump =   spr_mens_jump;
    sprite_fall =   spr_mens_fall;
    sprite_dash =   spr_mens_dash;
    
    sound_jump1 = snd_jump1;
    sound_jump2 = snd_jump2;
    
    imageSpeed = 1;
    
    stepFrame1 = 0;
    stepFrame2 = 8;
}

// if the player choose: Love
else if (global.Player1Profile = love)
{
    sprite_idle =   spr_love_idle;
    sprite_run =    spr_love_run;
    sprite_jump =   spr_love_jump;
    sprite_fall =   spr_love_fall;
    sprite_dash =   spr_love_dash;
    
    sound_jump1 = snd_jump1;
    sound_jump2 = snd_jump2;
    
    imageSpeed = 1;
    
    stepFrame1 = -1;
    stepFrame2 = 1;
}
// if the player choose: Veridian
else if (global.Player1Profile = veridian)
{
    sprite_idle =   spr_veridian_idle;
    sprite_run =    spr_veridian_run;
    sprite_jump =   spr_veridian_jump;
    sprite_fall =   spr_veridian_fall;
    sprite_dash =   spr_veridian_dash;
    
    sound_jump1 = snd_jump1_veridian;
    sound_jump2 = snd_jump2_veridian;
    
    imageSpeed = 1;
    
    stepFrame1 = 0;
    stepFrame2 = 2;
}
// if the player choose: Violet
else if (global.Player1Profile = violet)
{
    sprite_idle =   spr_violet_idle;
    sprite_run =    spr_violet_run;
    sprite_jump =   spr_violet_jump;
    sprite_fall =   spr_violet_fall;
    sprite_dash =   spr_violet_dash;
    
    sound_jump1 = snd_jump1_veridian;
    sound_jump2 = snd_jump2_veridian;
    
    imageSpeed = 1;
    
    stepFrame1 = 0;
    stepFrame2 = 2;
}
// if the player choose: Surfboard
else if (global.Player1Profile = surfboard)
{
    sprite_idle =   spr_surf_idle;
    sprite_run =    spr_surf_run;
    sprite_jump =   spr_surf_jump;
    sprite_fall =   spr_surf_fall;
    sprite_dash =   spr_surf_dash;
    
    sound_jump1 = snd_jump1;
    sound_jump2 = snd_jump2;
    
    imageSpeed = 1.8;
    
    stepFrame1 = 6;
    stepFrame2 = 21;
}
// if the player choose: Skateboard
else if (global.Player1Profile = skateboard)
{
    sprite_idle =   spr_skate_idle;
    sprite_run =    spr_skate_run;
    sprite_jump =   spr_skate_jump;
    sprite_fall =   spr_skate_fall;
    sprite_dash =   spr_skate_dash;
    
    sound_jump1 = snd_jump1;
    sound_jump2 = snd_jump2;
    
    imageSpeed = 1.8;
    
    stepFrame1 = 0;
    stepFrame2 = 0;
    
    stepFrame1 = 10;
    stepFrame2 = 21;
}
// if the player somehow chose nothing
else
{
    sprite_idle =   spr_player_idle;
    sprite_run =    spr_player_run;
    sprite_jump =   spr_player_jump;
    sprite_fall =   spr_player_fall;
    sprite_dash =   spr_player_dash;
    
    sound_jump1 = snd_jump1;
    sound_jump2 = snd_jump2;
    
    imageSpeed = 1;
    
    stepFrame1 = -1;
    stepFrame2 = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, spriteScaleX * image_xscale, spriteScaleY * image_yscale, angle, image_blend, image_alpha); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
