<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Vars
MaxButtons = 6
timer = 0;
gpID = 0
playerSelected = false; // If the player selected a character
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set own position
x = 0;
y = room_height / 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the button positions
buttonPos1 = 6; 
buttonPos2 = 1;
buttonPos3 = 2;
buttonPos4 = 3;
buttonPos5 = 4;
buttonPos6 = 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the gamepad deadzone
gamepad_set_axis_deadzone(gpID, 0.4);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the objects
// Create the buttons
for (i = 0; i &lt; MaxButtons; i++)
{
    instance_create(x, y, obj_charButton1);
};

// Create the selector
instance_create(x, y, obj_charSelect1);

// Create the character drawer
instance_create(x, y, obj_charDrawer1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Checking the keys
// [REMEBER] left and right are reversed
key_A = gamepad_button_check_pressed(gpID, gp_face1);
key_B = gamepad_button_check_pressed(gpID, gp_face2);

var haxis = gamepad_axis_value(gpID, gp_axislh);

if (haxis &lt; 0 &amp;&amp; timer == 0) // Left
{
    key_Right = true;
    timer = 20
}
else
{
    key_Right = false;
}

if (haxis &gt; 0 &amp;&amp; timer == 0) // Right
{
    key_Left = true;
    timer = 20
}
else
{
    key_Left = false;
}

if (haxis &lt; 0)
{
    key_RightHold = true
}
else
{
    key_RightHold = false;
}

if (haxis &gt; 0)
{
    key_LeftHold = true
}
else
{
    key_LeftHold = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Moving the buttons
// But only if the player hasn't selected yet
if (playerSelected = false)
{
    if (key_Left)
    {
        buttonPos1--;
        buttonPos2--;
        buttonPos3--;
        buttonPos4--;
        buttonPos5--;
        buttonPos6--;
        audio_play_sound(snd_woosh, 1, 0);
    }
    
    if (key_Right)
    {
        buttonPos1++;
        buttonPos2++;
        buttonPos3++;
        buttonPos4++;
        buttonPos5++;
        buttonPos6++;
        audio_play_sound(snd_woosh, 1, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Making sure the buttons won't go "out of bounds"
// REMEMBER TO CHANGE WHEN ADDING MORE BUTTONS
// (middlefinger to you yoyogames for not adding foreach) &gt;:(
if (buttonPos1 &lt; 1)
{
    buttonPos1 = MaxButtons
}

if (buttonPos1 &gt; MaxButtons)
{
    buttonPos1 = 1
}

if (buttonPos2 &lt; 1)
{
    buttonPos2 = MaxButtons
}

if (buttonPos2 &gt; MaxButtons)
{
    buttonPos2 = 1
}

if (buttonPos3 &lt; 1)
{
    buttonPos3 = MaxButtons
}

if (buttonPos3 &gt; MaxButtons)
{
    buttonPos3 = 1
}

if (buttonPos4 &lt; 1)
{
    buttonPos4 = MaxButtons
}

if (buttonPos4 &gt; MaxButtons)
{
    buttonPos4 = 1
}

if (buttonPos5 &lt; 1)
{
    buttonPos5 = MaxButtons
}

if (buttonPos5 &gt; MaxButtons)
{
    buttonPos5 = 1
}

if (buttonPos6 &lt; 1)
{
    buttonPos6 = MaxButtons
}

if (buttonPos6 &gt; MaxButtons)
{
    buttonPos6 = 1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timing the timer

if (timer &gt; 0)
{
    timer--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Giving the buttons a character
button1Char = monopoly;
button2Char = mens;
button3Char = love;
button4Char = veridian;
button5Char = surfboard;
button6Char = skateboard;

if (global.Player1Profile = veridian)
{
    button4Char = violet;    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controlling the drawer
// but only if the player hasn't selected yet
if (playerSelected = false)
{
    if ((key_Left) || (key_Right))
    {
        with(obj_charDrawer1) instance_destroy();
    }
    
    else if ((timer = 0) &amp;&amp; (!instance_exists(obj_charDrawer1)) &amp;&amp; (!key_RightHold) &amp;&amp; (!key_LeftHold))
    {
        instance_create(x, y, obj_charDrawer1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controlling selection
if (!playerSelected)
{
    if (key_A &amp;&amp; timer == 0 &amp;&amp; instance_exists(obj_charDrawer1))
    {
        if (obj_charSelect1.objID.image_index = 0)
        {
            global.Player2Profile = obj_charSelect1.currentSelected;
            playerSelected = true;
            instance_create(x, y, obj_charDrawerEffect1);
            audio_play_sound(snd_select, 1, 0);
        }
        else
        {
            audio_play_sound(snd_error, 1, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove Selection 
// This is here because i'd interfere with returning to main menu
if (playerSelected &amp;&amp; obj_charSelectContinue.GoingToNext == false)
{
    {
        if (key_B)
        {
            global.Player2Profile = 0;
            playerSelected = false;
            audio_play_sound(snd_deSelect, 1, 0);
            
            if (global.Player1Profile = violet)
            {
                global.Player1Profile = 0;
                obj_charButtonController2.playerSelected = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
