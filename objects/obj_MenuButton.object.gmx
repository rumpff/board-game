<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Variables
letters = 0;

// Set initial position
x = room_width / 2 + lengthdir_x(room_width + sprite_get_height(sprite_index), image_angle + 90);
y = room_height / 2 + lengthdir_y(room_width + sprite_get_height(sprite_index), image_angle + 90);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the position

var xpos = room_width / 2 + lengthdir_x(room_width / 4, image_angle + 90);
var ypos = room_height / 2 + lengthdir_y(room_height / 4, image_angle + 90);

x = lerp(x, xpos, 0.4)
y = lerp(y, ypos, 0.4)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_A = gamepad_button_check_pressed(global.CurrentHost,gp_face1)

stringA = string_copy(string1,1,letters);

var cursorOnButton = place_meeting(x,y,obj_controllerCursor);
if (cursorOnButton &amp;&amp; !selected) // on select
{
    audio_play_sound(snd_menuSelect,1,0);
}

selected = cursorOnButton

scale = lerp(scale, selected * 0.2 + 1, 0.3);
letters = lerp(letters, (string_length(string1) + 1) * selected, 0.2);

if (key_A)
{
    if (selected)
    {
        if(staysInScene)
        {
            alarm[0] = 1;
        }
        else
        {
            scr_trans();
        }
        scale = 1;
    }
}

image_xscale = scale;
image_yscale = scale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_font(fnt_main);
draw_set_color(c_black);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_text_transformed(x, y, title ,scale, scale, image_angle);


// Draw the description text
var textX = x + lengthdir_x(128, image_angle + 90);
var textY = y + lengthdir_y(128, image_angle + 90);

draw_set_halign(fa_center);
draw_set_valign(fa_bottom);
draw_set_font(fnt_small);

draw_set_color(c_black);
draw_text_transformed(textX + 2, textY + 2, stringA, 1, 1, image_angle);

draw_set_color(c_white);
draw_text_transformed(textX, textY, stringA, 1, 1, image_angle);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
