<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Vars
MaxButtons = 4
timer = 0;
gpID = global.CurrentHost;
playerSelected = false; // If the player selected a character
pos = 0; // The current position of the selection
EasterV = false; // For the VVVVVV easter levels

minSelect = -1;
maxSelect = 1;

// nog een check maken zodat je niet oneindig kan draaien
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if VVVVVV easter egg is achieved, and re-set vars

if ((global.Player1Profile = veridian &amp;&amp; global.Player2Profile = violet) || (global.Player2Profile = veridian &amp;&amp; global.Player1Profile = violet))
{
    EasterV = true;
    MaxButtons = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set own position
x = room_width / 2;
y = room_height + (room_height * 0.77);;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the button positions

if (EasterV)
{
    buttonPos1 = 3;
}
else // No easter eggs
{
    buttonPos1 = 2; 
    buttonPos2 = 3;
    buttonPos3 = 4;
    buttonPos4 = 5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the gamepad deadzone
gamepad_set_axis_deadzone(gpID, 0.4);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the objects
// Create the buttons
for (i = 0; i &lt; MaxButtons; i++)
{
    instance_create(x, y, obj_levelButton);
};


// Create the selector
instance_create(x, y, obj_levelSelect);

// Create the character drawer
instance_create(x, y, obj_levelDrawer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Checking the keys
// [REMEBER] left and right are reversed
key_A = gamepad_button_check_pressed(gpID, gp_face1);
key_B = gamepad_button_check_pressed(gpID, gp_face2);

var haxis = gamepad_axis_value(gpID, gp_axislh);

if (haxis &lt; 0 &amp;&amp; timer == 0) // Left
{
    key_Right = true;
    timer = 20
}
else
{
    key_Right = false;
}

if (haxis &gt; 0 &amp;&amp; timer == 0) // Right
{
    key_Left = true;
    timer = 20
}
else
{
    key_Left = false;
}

if (haxis &lt; 0)
{
    key_RightHold = true
}
else
{
    key_RightHold = false;
}

if (haxis &gt; 0)
{
    key_LeftHold = true
}
else
{
    key_LeftHold = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Moving the buttons
if (!EasterV) // There is only one V level so no buttons can be moved
{
    if (key_Right &amp;&amp; pos &gt; -2)
    {
        buttonPos1--;
        buttonPos2--;
        buttonPos3--;
        buttonPos4--;
        pos--;
        audio_play_sound(snd_woosh, 1, 0);
        with(obj_levelDrawer) instance_destroy();
    }
    
    if (key_Left &amp;&amp; pos &lt; 1)
    {
        buttonPos1++;
        buttonPos2++;
        buttonPos3++;
        buttonPos4++;
        pos++;
        audio_play_sound(snd_woosh, 1, 0);
        with(obj_levelDrawer) instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Making sure the buttons won't go "out of bounds"
// REMEMBER TO CHANGE WHEN ADDING MORE BUTTONS
// (middlefinger to you yoyogames for not adding foreach) &gt;:(
/*
if (buttonPos1 &lt; 1)
{
    buttonPos1 = 3
}

if (buttonPos1 &gt; 3)
{
    buttonPos1 = 1
}

if (buttonPos2 &lt; 1)
{
    buttonPos2 = 3
}

if (buttonPos2 &gt; 3)
{
    buttonPos2 = 1
}

if (buttonPos3 &lt; 1)
{
    buttonPos3 = 3
}

if (buttonPos3 &gt; 3)
{
    buttonPos3 = 1
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timing the timer

if (timer &gt; 0)
{
    timer--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Giving the buttons a character
if (EasterV)
{
    button1Lvl = 91; // Presidented Fate
}
else
{
    button1Lvl = 1; // Monopoly
    button2Lvl = 2; // Chess
    button3Lvl = 3; // Sorry
    button4Lvl = 4; // Scrabble
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controlling the drawer
// but only if the player hasn't selected yet
if (playerSelected = false)
{
    if ((key_Left) || (key_Right))
    {
        // Removed the destroy here cuz of the blocking system
    }
    
    else if ((timer = 0) &amp;&amp; (!instance_exists(obj_levelDrawer))) //&amp;&amp; (!key_RightHold) &amp;&amp; (!key_LeftHold))
    {
        instance_create(x, y, obj_levelDrawer);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controlling selection
if (!playerSelected)
{
    if (key_A &amp;&amp; timer == 0 &amp;&amp; instance_exists(obj_levelDrawer) &amp;&amp; !instance_exists(obj_wowTrans2))
    {
        playerSelected = true;
        audio_play_sound(snd_select, 1, 0);
        if (obj_levelSelect.currentArena = rm_pre_V)
        {
            instance_create(x, y, obj_VTransArenaEnter);
            with(obj_VTransArenaEnter) destination = obj_levelSelect.currentArena;
        }
        else
        {
            instance_create(x, y, obj_wowTransArenaEnter);
            with(obj_wowTransArenaEnter) destination = obj_levelSelect.currentArena;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if player wants to go back to charachter selection
if (key_B)
{
    audio_play_sound(snd_menuBack,1,0);
    room_goto(rm_characterSelect);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
