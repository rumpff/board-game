<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_charButton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization

buttonId = instance_number(obj_charButton2);
buttonPos = noone;
charID = noone;
choosen = false; // If the other player already choose this character
type = "poo"
xpos = 0; // The x destination
ypos = 0; // The y destinaton
imgAngle = 0; // The angle destination
xlerp = 0; // The x lerp outcome
ylerp = 0; // The y lerp outcome
angle = 0; // The final angle

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Getting Character type
switch (charID)
{
    case 1: 
    type = "monopoly"
    break;
    
    case 2: 
    type = "mens"
    break;
    
    case 3: 
    type = "love"
    break;
    
    case 4: 
    type = "veridian"
    break;
            
    case violet: 
    type = "violet"
    break;
    
    case 5: 
    type = "surfboard"
    break;
    
    case 6: 
    type = "skateboard"
    break;
}
 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if the other player choose the same character
if (charID == global.Player2Profile)
{
    image_index = 1;
    choosen = true;
}
else
{
    image_index = 0;
    choosen = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Getting the positions

switch (buttonId)
{
    case 1: 
    buttonPos = obj_charButtonController2.buttonPos1; 
    break;
    
    case 2: 
    buttonPos = obj_charButtonController2.buttonPos2; 
    break;
    
    case 3: 
    buttonPos = obj_charButtonController2.buttonPos3; 
    break;
    
    case 4: 
    buttonPos = obj_charButtonController2.buttonPos4; 
    break;
    
    case 5: 
    buttonPos = obj_charButtonController2.buttonPos5; 
    break;
    
    case 6: 
    buttonPos = obj_charButtonController2.buttonPos6; 
    break;
}
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Getting the character from the controller

switch (buttonId)
{
    case 1: 
    charID = obj_charButtonController2.button1Char; 
    break;
    
    case 2: 
    charID = obj_charButtonController2.button2Char; 
    break;
    
    case 3: 
    charID = obj_charButtonController2.button3Char; 
    break;
    
    case 4: 
    charID = obj_charButtonController2.button4Char; 
    break;
    
    case 5: 
    charID = obj_charButtonController2.button5Char; 
    break;
    
    case 6: 
    charID = obj_charButtonController2.button6Char; 
    break;
}
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculating destination
xpos = obj_charButtonController2.x + lengthdir_x(256 * 2, buttonPos * 60);
ypos = obj_charButtonController2.y + lengthdir_y(256 * 2, buttonPos * 60);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculating angle
imgAngle = point_direction(x, y, obj_charButtonController2.x, obj_charButtonController2.y)

angle = imgAngle - 180;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lerping bebe
xlerp = lerp(x, xpos, 0.2);
ylerp = lerp(y, ypos, 0.2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Applying Pos &amp; angle
x = xlerp;
y = ylerp;

image_angle = angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self and text
draw_self();

draw_set_font(fnt_small)
draw_set_color(c_black);
draw_set_valign(fa_center);
draw_set_halign(fa_center);
draw_text_transformed(x, y, type, 1, 1, angle - 90)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
